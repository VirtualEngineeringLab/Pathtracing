#pragma kernel CSMain

RWTexture2D<float4> Result;
RWTexture2D<float4> Result1;

float4x4 _CameraToWorld;
float4x4 _WorldToCamera;
float4x4 _CameraProjection;
float4x4 _CameraInverseProjection;

float4 _DirectionalLight;

float2 _PixelOffset;
int _Depth;
int _SamplesPerPixel;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

//-------------------------------------
//- UTILITY

float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

//-------------------------------------
//- RANDOMNESS

float2 _Pixel;
float _Seed;

float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}


//-------------------------------------
//- SPHERES

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

StructuredBuffer<Sphere> _Spheres;


//-------------------------------------
//- MESHES

struct MeshObject
{
	float4x4 localToWorldMatrix;
	int indices_offset;
	int indices_count;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;


//-------------------------------------
//- RAY

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}


//-------------------------------------
//- RAYHIT

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}


//-------------------------------------
//- INTERSECTION

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = 0.5f;
        bestHit.specular = 0.03f;
        bestHit.smoothness = 0.2f;
        bestHit.emission = float3(0.0f, 0.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.smoothness = sphere.smoothness;
        bestHit.emission = sphere.emission;
    }
}

bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2,
	inout float t, inout float u, inout float v)
{
	// find vectors for two edges sharing vert0
	float3 edge1 = vert1 - vert0;
	float3 edge2 = vert2 - vert0;

	// begin calculating determinant - also used to calculate U parameter
	float3 pvec = cross(ray.direction, edge2);

	// if determinant is near zero, ray lies in plane of triangle
	float det = dot(edge1, pvec);

	// use backface culling
	if (det < EPSILON)
		return false;
	float inv_det = 1.0f / det;

	// calculate distance from vert0 to ray origin
	float3 tvec = ray.origin - vert0;

	// calculate U parameter and test bounds
	u = dot(tvec, pvec) * inv_det;
	if (u < 0.0 || u > 1.0f)
		return false;

	// prepare to test V parameter
	float3 qvec = cross(tvec, edge1);

	// calculate V parameter and test bounds
	v = dot(ray.direction, qvec) * inv_det;
	if (v < 0.0 || u + v > 1.0f)
		return false;

	// calculate t, ray intersects triangle
	t = dot(edge2, qvec) * inv_det;

	return true;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject)
{
	uint offset = meshObject.indices_offset;
	uint count = offset + meshObject.indices_count;
	for (uint i = offset; i < count; i += 3)
	{
		float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
		float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
		float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;

		float t, u, v;
		if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v))
		{
			if (t > 0 && t < bestHit.distance)
			{
				bestHit.distance = t;
				bestHit.position = ray.origin + t * ray.direction;
				bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
				bestHit.albedo = 0.0f;
				bestHit.specular = 0.65f;
				bestHit.smoothness = 0.99f;
				bestHit.emission = 0.0f;
			}
		}
	}
}

//-------------------------------------
//- TRACE

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	uint count, stride, i;

	// Trace ground plane
	IntersectGroundPlane(ray, bestHit);

	// Trace spheres
	_Spheres.GetDimensions(count, stride);
	for (i = 0; i < count; i++)
	{
		IntersectSphere(ray, bestHit, _Spheres[i]);
	}

	// Trace mesh objects
	_MeshObjects.GetDimensions(count, stride);
	for (i = 0; i < count; i++)
	{
		IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
	}

	return bestHit;
}


//-------------------------------------
//- SAMPLING

float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha)
{
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

//-------------------------------------
//- SHADE

float SmoothnessToPhongAlpha(float s)
{
    return pow(1000.0f, s * s);
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // Calculate chances of diffuse and specular reflection
        hit.albedo = min(1.0f - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);

        // Roulette-select the ray's path
        float roulette = rand();
        if (roulette < specChance)
        {
            // Specular reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
        }
        else if (diffChance > 0 && roulette < specChance + diffChance)
        {
            // Diffuse reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / diffChance) * hit.albedo;
        }
        else
        {
            // Terminate ray
            ray.energy = 0.0f;
        }

        return hit.emission;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

// float2 getPixel(in Camera c, in float3 pos) {
//     float3 posLocal = inverse(c.rotate) * (pos - c.pos);
//     float3 dirLocal = normalize(posLocal);

//     float2 uv = -vec2(dirLocal.x / dirLocal.z, dirLocal.y / dirLocal.z);

//     //convert uv from [-iPlaneSize*0.5, iPlaneSize.x*0.5) range to [0.0, 1.0)
//     uv = (uv + c.iPlaneSize*0.5) / c.iPlaneSize;
//     uv -= vec2(0.5) / iResolution.xy;//fix for half pixel shift 
//     return uv;
// }

// Ray CreateCameraRay2(float2 uv)
// {
//     // Transform the camera origin to world space
//     float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
//     // Invert the perspective projection of the view-space position
//     float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
//     // Transform the direction from camera to world space and normalize
//     direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
//     direction = direction/direction.z;

//     return CreateRay(origin, direction);
// }

float2 FindCameraRay(Ray input)
{
//     // Transform the camera origin to world space
//     float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    float3 pos = input.origin + input.direction;
    
    // // Invert the perspective projection of the view-space position
    // float2 res = float2(3840,2160);
    // float4 direction = mul(_WorldToCamera, float4(pos*100,0.0f));
    // // Transform the direction from world to camera space and normalize
    // direction = mul(_CameraProjection, float4(direction.xyz, 1.0f));
    // // direction = direction/direction.w;

    // float2 uv = direction.xy;
    // uv += res/2;

    // return uv;

    // pos = normalize(pos - _WorldSpaceCameraPos)*(_ProjectionParams.y + (_ProjectionParams.z - _ProjectionParams.y))+_WorldSpaceCameraPos;
    // fixed2 uv =0;
    // fixed3 toCam = mul(unity_WorldToCamera, pos);
    // fixed camPosZ = toCam.z;
    // fixed height = 2 * camPosZ / unity_CameraProjection._m11;
    // fixed width = _ScreenParams.x / _ScreenParams.y * height;
    // uv.x = (toCam.x + width / 2)/width;
    // uv.y = (toCam.y + height / 2)/height;
    // return uv;

    pos = normalize(input.direction)*(0.03 + (1000.0 - 0.03));
    float ratio = 3840.0 / 2160.0;
    float2 uv =0;
    float3 toCam = mul(_WorldToCamera, pos);
    float camPosZ = toCam.z;
    float height =  camPosZ / _CameraProjection._m11;
    float width =  (ratio)  * height;
    uv.x = (toCam.x - width)/width;
    uv.y = (toCam.y - height)/height;
    return 1.0-uv*float2(1080.0*ratio, 1080.0);
}


//-------------------------------------
//- KERNEL

int renderMode;
int _Counter;
int _Divisions;

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float divider = 16.0;
    if (_Depth==1) {
		uint width, height;
        Result.GetDimensions(width, height);
        float2 uv = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);

        Ray ray = CreateCameraRay(uv);
        RayHit hit = Trace(ray);
        float dis = hit.distance/divider;
        Result[id.xy] = float4(dis,dis,dis,dis);
        return;
	}

    if(_Counter%_Divisions==0 && renderMode ==0)
    {
        Result[id.xy] = Result1[id.xy];
        return;
    }
    
    uint width, height;
    Result.GetDimensions(width, height);
    uint stripe = height/_Divisions;
    if(id.y>height-stripe*_Counter || id.y < height-stripe*(_Counter+1)){
        return;
    }
	float3 result = float3(0, 0, 0);	

    float depth = 0.0;




    // id.x%2==0&& id.y % 2 == 0

	_Pixel = id.xy * 2;

    // Get the dimensions of the RenderTexture
    // uint width, height;
    // Result.GetDimensions(width, height);

    //id.y = height - id.y;

    for (int j = 1; j < _SamplesPerPixel+1; j++)
    {
        // Transform pixel to [-1,1] range
        float2 uv = float2((id.xy + (_PixelOffset*j/_SamplesPerPixel))/ float2(width, height) * 2.0f - 1.0f);
        //float2 uv2 = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);

        //uv.y = - uv.y;

        // Get a ray for the UVs
        Ray ray = CreateCameraRay(uv);
        RayHit hit = Trace(ray);
        float3 hitPos = hit.position;
        depth = (hit.distance/128.0)/ _SamplesPerPixel;
        result += ray.energy * Shade(ray, hit) * 2 / _SamplesPerPixel;   
        for (int i = 1; i < 4; i++)
        {
            hit = Trace(ray);
            result += ray.energy * Shade(ray, hit) * 2 / _SamplesPerPixel;            
            if (!any(ray.energy))
                break;
        }

        // uv = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);
        // Ray ray = CreateCameraRay(uv);
        // RayHit hit = Trace(ray);
        // float dis = hit.distance/divider;

        if(renderMode == 2){
            Result1[id.xy] = float4(result, 1.0);

            float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
            // float2 reproUV = FindCameraRay(CreateRay(origin,hitPos-origin));
            float2 reproUV = FindCameraRay(CreateCameraRay(uv));

            Result[id.xy] = Result1[reproUV];
            return;
        }

        

        // float3 worldPosRelative = GetCameraRelativePositionWS(hitPos);
        // float4 clipPos = ComputeClipSpacePosition(worldPosRelative, UNITY_MATRIX_VP);
        // float3 ndcPos = ComputeNormalizedDeviceCoordinatesWithZ(worldPosRelative, UNITY_MATRIX_VP);
    
        // float4 positionSS = 0;
        // positionSS.xy = ndcPos.xy / _ScreenSize.zw;
    }
    
    // vec2 uvold = getPixel(cameraOld, hitPos-motionvec);

    // vec4 dataOld = texture(iChannel3, uvold);
    // vec3 colorOld = max(dataOld.xyz, vec3(0.0));
    // float expected_dist = length(hitPos-motionvec-cameraOld.pos);
    // float actual_dist = dataOld.w;
    // bool isVisible = abs(actual_dist - expected_dist) < 0.2;
    // bool isInCameraFrustum = (uvold.x > 0.0 && uvold.x < 1.0 && uvold.y > 0.0 && uvold.y < 1.0);
    // bool reproject = 	iFrame != 0 &&					//previous frame is available
    //     isInCameraFrustum && //
    //     isVisible && 					//surface is visible from both camera positions 
    //     all(greaterThan(uvold * iResolution.xy, vec2(2.)));	
    // accumulatedColor = reproject ? mix(accumulatedColor, colorOld, temp_weight) : accumulatedColor;  

    // vec3 old_camera_position = get(vec2(1.0,0.0)).xyz;
    // vec3 old_camera_target = get(vec2(1.0,1.0)).xyz;
    
    // //compute current ray:
    // ray r = screen_space_to_world_space(camera_position,camera_target,uv);

    // vec4 frame = vec4(0.0);
	// //intersect scene and compute AO:
    // intersection_info i = scene(r, -1.0,1.5);
    // if(i.dist_id.y > -0.5)
    // {
    //     frame.x = i.dist_id.x;
    //     frame.y = compute_ao(i,uv);
    //     frame.z = 1.0;
        
    //     //try to accumulate samples by reprojection:
    //     vec3 reproj_uv = world_space_to_screen_space(old_camera_position,old_camera_target,i.pos_ws);
    //     vec2 reproj_uv01 = reproj_uv.xy;
    //     reproj_uv01.x /= aspect;
    //     reproj_uv01 = reproj_uv01 * 0.5 + 0.5;
        
    //     if(	reproj_uv01.x > 0.0 && reproj_uv01.x < 1.0 && 
    //        	reproj_uv01.y > 0.0 && reproj_uv01.y < 1.0 &&
	// 		reproj_uv.z > -0.5
    //       )
    //     {
    //         //we are using old viewport 
    //         vec4 old_pixel = texture(iChannel1,reproj_uv01);
    //         if(old_pixel.x > 0.0)
    //         {
    //         	ray oldray = screen_space_to_world_space(old_camera_position,old_camera_target,reproj_uv.xy);
    //         	vec3 old_pos_ws = oldray.point + oldray.dir * old_pixel.x;
                
    //             float ofs = length(old_pos_ws - i.pos_ws);
    //             if(ofs < REPROJ_DELTA)
    //             {
    //                 frame.y += old_pixel.y; //accumulate ao
    //                 frame.z += old_pixel.z; //add weight
                    
    //             }
    //             frame.w = ofs;
	// 		}
    //     }
        
    // }

    
    float2 uv = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);
    RayHit hit = Trace(ray);
    float dis = hit.distance/divider;
    Result1[id.xy] = float4(result, dis);
}
